{"ast":null,"code":"let userAccessToken;\nconst client_id = 'ed091a01669f4561b1beaf273b28d665';\nconst redirect_uri = 'http://localhost:3000/';\nconst Spotify = {\n  getAccessToken() {\n    if (userAccessToken) {\n      return userAccessToken;\n    }\n\n    const accessToken = window.location.href.match(/access_token=([^&]*)/);\n    const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n\n    if (accessToken && expiresInMatch) {\n      userAccessToken = accessToken[1];\n      const expiresIn = Number(expiresInMatch[1]);\n      window.setTimeout(() => userAccessToken = '', expiresIn * 1000);\n      window.history.pushState('Access Token', null, '/');\n      return userAccessToken;\n    } else {\n      const accessUrl = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirect_uri}`;\n      window.location = accessUrl;\n    }\n  },\n\n  search(term) {\n    const accessToken = Spotify.getAccessToken();\n    return fetch(`http://api.spotify.com/v1/search?q=${term}&type=track`, {\n      headers: {\n        Authorization: `Bearer ${accessToken}`\n      }\n    }).then(response => {\n      return response.json();\n    }).then(jsonResponse => {\n      if (!jsonResponse.tracks) {\n        return [];\n      } else {\n        return jsonResponse.tracks.items.map(track => {\n          return {\n            id: track.id,\n            name: track.name,\n            artist: track.artists[0].name,\n            album: track.album.name,\n            uri: track.uri\n          };\n        });\n      }\n    });\n  },\n\n  savePlaylist(playlist, trackUris) {\n    if (!playlist && !trackUris) {\n      return;\n    }\n\n    const accessToken = spotify.getAccessToken();\n  }\n\n};\nexport default Spotify;","map":{"version":3,"sources":["/Users/hrush/Desktop/Afsheen/jamming/src/util/Spotify.js"],"names":["userAccessToken","client_id","redirect_uri","Spotify","getAccessToken","accessToken","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","playlist","trackUris","spotify"],"mappings":"AACA,IAAIA,eAAJ;AACA,MAAMC,SAAS,GAAG,kCAAlB;AACA,MAAMC,YAAY,GAAG,wBAArB;AACA,MAAMC,OAAO,GAAG;AACZC,EAAAA,cAAc,GAAG;AACb,QAAGJ,eAAH,EAAoB;AACjB,aAAOA,eAAP;AACF;;AACD,UAAMK,WAAW,GAAGC,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,sBAA3B,CAApB;AACA,UAAMC,cAAc,GAAGJ,MAAM,CAACC,QAAP,CAAgBC,IAAhB,CAAqBC,KAArB,CAA2B,oBAA3B,CAAvB;;AACA,QAAGJ,WAAW,IAAIK,cAAlB,EAAiC;AAC7BV,MAAAA,eAAe,GAAGK,WAAW,CAAC,CAAD,CAA7B;AACA,YAAMM,SAAS,GAAGC,MAAM,CAACF,cAAc,CAAC,CAAD,CAAf,CAAxB;AAEAJ,MAAAA,MAAM,CAACO,UAAP,CAAkB,MAAMb,eAAe,GAAG,EAA1C,EAA8CW,SAAS,GAAG,IAA1D;AACAL,MAAAA,MAAM,CAACQ,OAAP,CAAeC,SAAf,CAAyB,cAAzB,EAAyC,IAAzC,EAA+C,GAA/C;AACA,aAAOf,eAAP;AACH,KAPD,MAOM;AACD,YAAMgB,SAAS,GAAI,oDAAmDf,SAAU,kEAAiEC,YAAa,EAA9J;AACAI,MAAAA,MAAM,CAACC,QAAP,GAAkBS,SAAlB;AACJ;AAEJ,GAnBW;;AAqBZC,EAAAA,MAAM,CAACC,IAAD,EAAO;AACT,UAAMb,WAAW,GAAGF,OAAO,CAACC,cAAR,EAApB;AACA,WAAOe,KAAK,CAAE,sCAAqCD,IAAK,aAA5C,EAA0D;AAChEE,MAAAA,OAAO,EAAE;AAACC,QAAAA,aAAa,EAAG,UAAShB,WAAY;AAAtC;AADuD,KAA1D,CAAL,CAECiB,IAFD,CAEMC,QAAQ,IAAI;AACjB,aAAOA,QAAQ,CAACC,IAAT,EAAP;AACF,KAJC,EAICF,IAJD,CAIMG,YAAY,IAAI;AACrB,UAAG,CAACA,YAAY,CAACC,MAAjB,EAAwB;AACpB,eAAO,EAAP;AACH,OAFD,MAEM;AACF,eAAOD,YAAY,CAACC,MAAb,CAAoBC,KAApB,CAA0BC,GAA1B,CAA8BC,KAAK,IAAI;AAC1C,iBAAO;AACHC,YAAAA,EAAE,EAAED,KAAK,CAACC,EADP;AAEHC,YAAAA,IAAI,EAAEF,KAAK,CAACE,IAFT;AAGHC,YAAAA,MAAM,EAAEH,KAAK,CAACI,OAAN,CAAc,CAAd,EAAiBF,IAHtB;AAIHG,YAAAA,KAAK,EAAEL,KAAK,CAACK,KAAN,CAAYH,IAJhB;AAKHI,YAAAA,GAAG,EAAEN,KAAK,CAACM;AALR,WAAP;AAQH,SATM,CAAP;AAUH;AACH,KAnBC,CAAP;AAoBH,GA3CW;;AA6CZC,EAAAA,YAAY,CAACC,QAAD,EAAWC,SAAX,EAAsB;AAC9B,QAAG,CAACD,QAAD,IAAa,CAACC,SAAjB,EAA4B;AACxB;AACH;;AACD,UAAMjC,WAAW,GAAGkC,OAAO,CAACnC,cAAR,EAApB;AACH;;AAlDW,CAAhB;AAqDA,eAAeD,OAAf","sourcesContent":["\nlet userAccessToken; \nconst client_id = 'ed091a01669f4561b1beaf273b28d665';\nconst redirect_uri = 'http://localhost:3000/';\nconst Spotify = {\n    getAccessToken() {\n        if(userAccessToken) {\n           return userAccessToken;\n        }\n        const accessToken = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n        if(accessToken && expiresInMatch){\n            userAccessToken = accessToken[1];\n            const expiresIn = Number(expiresInMatch[1]);\n\n            window.setTimeout(() => userAccessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return userAccessToken;\n        } else{\n             const accessUrl = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirect_uri}`;\n             window.location = accessUrl;\n        }\n        \n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`http://api.spotify.com/v1/search?q=${term}&type=track`, {\n              headers: {Authorization: `Bearer ${accessToken}`}\n             }).then(response => {\n                return response.json();\n             }).then(jsonResponse => {\n                if(!jsonResponse.tracks){\n                    return [];\n                } else{\n                    return jsonResponse.tracks.items.map(track => {\n                        return {\n                            id: track.id,\n                            name: track.name,\n                            artist: track.artists[0].name,\n                            album: track.album.name,\n                            uri: track.uri\n                        }\n\n                    });\n                }\n             })\n    },\n\n    savePlaylist(playlist, trackUris) {\n        if(!playlist && !trackUris) {\n            return;\n        }\n        const accessToken = spotify.getAccessToken();\n    }\n};\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}