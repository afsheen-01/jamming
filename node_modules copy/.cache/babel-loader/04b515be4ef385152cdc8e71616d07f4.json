{"ast":null,"code":"var userAccessToken='';var client_id='ed091a01669f4561b1beaf273b28d665';var redirect_uri='http://firstproject-jamming.surge.sh';var Spotify={getAccessToken:function getAccessToken(){if(userAccessToken){return userAccessToken;}var accessToken=window.location.href.match(/access_token=([^&]*)/);var expiresInMatch=window.location.href.match(/expires_in=([^&]*)/);if(accessToken&&expiresInMatch){userAccessToken=accessToken[1];var expiresIn=Number(expiresInMatch[1]);window.setTimeout(function(){return userAccessToken='';},expiresIn*1000);window.history.pushState('Access Token',null,'/');return userAccessToken;}else{var accessUrl=\"https://accounts.spotify.com/authorize?client_id=\".concat(client_id,\"&response_type=token&scope=playlist-modify-public&redirect_uri=\").concat(redirect_uri);window.location=accessUrl;}},search:function search(term){var accessToken=Spotify.getAccessToken();return fetch(\"https://api.spotify.com/v1/search?q=\".concat(term,\"&type=track\"),{headers:{Authorization:\"Bearer \".concat(accessToken)}}).then(function(response){return response.json();}).then(function(jsonResponse){if(!jsonResponse.tracks){return[];}else{return jsonResponse.tracks.items.map(function(track){return{id:track.id,name:track.name,artist:track.artists[0].name,album:track.album.name,uri:track.uri};});}});},savePlaylist:function savePlaylist(playlist,trackUris){if(!playlist||!trackUris.length){return;}var accessToken=Spotify.getAccessToken();var headers={Authorization:\"Bearer \".concat(accessToken)};var userId='';return fetch('https://api.spotify.com/v1/me',{headers:headers}).then(function(response){return response.json();}).then(function(jsonResponse){userId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists\"),{headers:headers,method:'POST',body:JSON.stringify({name:playlist})}).then(function(response){return response.json();}).then(function(jsonResponse){var playlistId=jsonResponse.id;return fetch(\"https://api.spotify.com/v1/users/\".concat(userId,\"/playlists/\").concat(playlistId,\"/tracks\"),{headers:headers,method:'POST',body:JSON.stringify({uris:trackUris})});});});}};export default Spotify;","map":{"version":3,"sources":["/Users/hrush/Desktop/Afsheen/jamming/src/util/Spotify.js"],"names":["userAccessToken","client_id","redirect_uri","Spotify","getAccessToken","accessToken","window","location","href","match","expiresInMatch","expiresIn","Number","setTimeout","history","pushState","accessUrl","search","term","fetch","headers","Authorization","then","response","json","jsonResponse","tracks","items","map","track","id","name","artist","artists","album","uri","savePlaylist","playlist","trackUris","length","userId","method","body","JSON","stringify","playlistId","uris"],"mappings":"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","sourcesContent":["\nlet userAccessToken = ''; \nconst client_id = 'ed091a01669f4561b1beaf273b28d665';\nconst redirect_uri = 'http://firstproject-jamming.surge.sh';\nconst Spotify = {\n    getAccessToken() {\n        if(userAccessToken) {\n           return userAccessToken;\n        }\n        const accessToken = window.location.href.match(/access_token=([^&]*)/);\n        const expiresInMatch = window.location.href.match(/expires_in=([^&]*)/);\n        if(accessToken && expiresInMatch){\n            userAccessToken = accessToken[1];\n            const expiresIn = Number(expiresInMatch[1]);\n\n            window.setTimeout(() => userAccessToken = '', expiresIn * 1000);\n            window.history.pushState('Access Token', null, '/');\n            return userAccessToken;\n        } else{\n             const accessUrl = `https://accounts.spotify.com/authorize?client_id=${client_id}&response_type=token&scope=playlist-modify-public&redirect_uri=${redirect_uri}`;\n             window.location = accessUrl;\n        }\n        \n    },\n\n    search(term) {\n        const accessToken = Spotify.getAccessToken();\n        return fetch(`https://api.spotify.com/v1/search?q=${term}&type=track`, {\n              headers: {Authorization: `Bearer ${accessToken}`}\n             }).then(response => {\n                return response.json();\n             }).then(jsonResponse => {\n                if(!jsonResponse.tracks){\n                    return [];\n                } else{\n                    return jsonResponse.tracks.items.map(track => {\n                        return {\n                            id: track.id,\n                            name: track.name,\n                            artist: track.artists[0].name,\n                            album: track.album.name,\n                            uri: track.uri\n                        }\n\n                    });\n                }\n             })\n    },\n\n    savePlaylist(playlist, trackUris) {\n        if(!playlist || !trackUris.length) {\n            return;\n        }\n        const accessToken = Spotify.getAccessToken();\n        const headers = {Authorization: `Bearer ${accessToken}` };\n        let userId = '';\n        return fetch('https://api.spotify.com/v1/me',{ headers: headers })\n        .then(response => {\n            return response.json();\n        }).then(jsonResponse => {\n            userId = jsonResponse.id;\n            return fetch(`https://api.spotify.com/v1/users/${userId}/playlists`, {\n                headers: headers,\n                method: 'POST',\n                body: JSON.stringify({name: playlist})\n            }).then(response => response.json())\n            .then(jsonResponse => {\n                const playlistId = jsonResponse.id;\n                return fetch(`https://api.spotify.com/v1/users/${userId}/playlists/${playlistId}/tracks`, {\n                    headers: headers,\n                    method: 'POST',\n                    body: JSON.stringify({uris: trackUris})\n                })\n            })\n        })\n    }\n};\n\nexport default Spotify;"]},"metadata":{},"sourceType":"module"}